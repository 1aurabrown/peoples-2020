@import './variables';

/**
 * Sets a media query for the specified breakpoint
 *
 * Accepts:
 * - $media-query: {String} Breakpoint variable (list found in variables.scss)
 *
 * Usage:
 * .selector {
 *   @include media-query($medium-up) {
 *     color: red;
 *   }
 * }
 */
@mixin media-query($media-query) {
  $breakpoint-found: false;

  @each $breakpoint in $breakpoints {
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);

    @if $media-query == $name and $declaration {
      $breakpoint-found: true;

      @media only screen and #{$declaration} {
        @content;
      }
    }
  }
}

/*===============UNDERLINES=================*/

// Faux underline
@mixin faux-underline {
  display: inline-block;
  position: relative;
  text-decoration: none;

  &::after {
    position: absolute;
    content: '';
    bottom: calc(50% - .7em);
    left: 0;
    right: 0;
    border-bottom: 1px solid;
  }
}

@mixin uppercase {
  text-transform: uppercase;
  letter-spacing: .025em;
}
// Faux underline
@mixin faux-strikethrough {
  position: relative;
  display: inline-block;
  text-decoration: none;

  &::after {
    position: absolute;
    content: '';
    top: 0;
    height: calc(50% - 1px);
    left: 0;
    right: 0;
    border-bottom: 1px solid;
  }
}

/**
 * Hide element but make it accessible to screen readers
 *
 * Usage:
 * .selector {
 *   @include visually-hidden;
 * }
 */
@mixin visually-hidden {
  // stylelint-disable-next-line
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  clip: rect(0 0 0 0);
}

/**
 * Reverse the properties applied by @mixin visually-hidden
 *
 * Accepts:
 * - $position: {String} Positioning method for element
 *
 * Usage:
 * .selector {
 *   @include visually-shown(relative);
 * }
 */
@mixin visually-shown($position: inherit) {
  // stylelint-disable-next-line
  position: $position !important;
  overflow: auto;
  width: auto;
  height: auto;
  margin: 0;
  clip: auto;
}


// Reset Input
@mixin reset-input {
  appearance: none;
  cursor: pointer;
  background: transparent;
  border: 0;
  border-radius: 0;
  width: auto;
  margin: 0;
  padding: 0;
  line-height: normal;
  text-align: left;
}


@mixin min-full-height {
  min-height: calc(100vh - #{$header-height-desktop} - #{2 * $padding-desktop});
  @include media-query($small) {
    min-height: calc(100vh - #{$header-height-mobile} - #{2 * $padding-mobile});
  }
}

@mixin max-full-height {
  max-height: calc(100vh - #{$header-height-desktop} - #{2 * $padding-desktop});
  @include media-query($small) {
    max-height: calc(100vh - #{$header-height-mobile} - #{2 * $padding-mobile});
  }
}

@mixin full-height {
  height: calc(100vh - #{$header-height-desktop} - #{2 * $padding-desktop});
  @include media-query($small) {
    height: calc(100vh - #{$header-height-mobile} - #{2 * $padding-mobile});
  }
}

@mixin mobile-modal-slider {
  height: calc(100vh - #{$header-height-mobile});
  top: $header-height-mobile;
  transition: transform $transition-duration $transition-timing;
  transform: translateX(0);
}